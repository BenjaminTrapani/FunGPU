(let ((num-integrate (lambda (input width func)
                       (let ((half-width (/ width 2)))
                         (* width (+ (func (+ input half-width)) (func (- input half-width)))))))
      (hard-function (lambda (x)
                       (/ (+ 1 (* x x)) (* (- 1 (* x x)) (expt (+ 1 (expt x 4)) 0.5))))))
  (let ((integrate-between (lambda (self num-integrate-f f a b max-width)
                             (let ((cur-width (- b a))
                                   (midpoint (/ (+ a b) 2))
                                   (perform-recursion (lambda (integrate-between-f num-integrate-f f a b midpoint max-width)
                                                        (+ (integrate-between-f integrate-between-f num-integrate-f f a midpoint max-width)
                                                           (integrate-between-f integrate-between-f num-integrate-f f midpoint b max-width))))) 
                               (if (> max-width cur-width)
                                   (num-integrate-f midpoint cur-width f)
                                   (perform-recursion self num-integrate-f f a b midpoint max-width)))))
        (integrate-by-blocks (lambda (self integrate-between-f num-integrate-f f a b max-width block-size accum)
                               (let ((cur-upper-bound (+ a block-size))
                                     (perform-final-block (lambda (accum integrate-between-f num-integrate-f f a b max-width)
                                                            (+ accum (integrate-between-f integrate-between-f num-integrate-f f a b max-width))))
                                     (perform-recursive-call (lambda (integrate-by-blocks-f integrate-between-f num-integrate-f f cur-upper-bound a b max-width block-size accum)
                                                               (integrate-by-blocks-f integrate-by-blocks-f integrate-between-f num-integrate-f f cur-upper-bound b max-width block-size
                                           (+ accum  (integrate-between-f integrate-between-f num-integrate-f f a cur-upper-bound max-width))))))
                                 (if (> cur-upper-bound b)
                                     (perform-final-block accum integrate-between-f num-integrate-f f a b max-width)
                                     (perform-recursive-call self integrate-between-f num-integrate-f f cur-upper-bound a b max-width block-size accum))))))
    (integrate-by-blocks integrate-by-blocks integrate-between num-integrate hard-function 2 2048 0.01 20 0)))
