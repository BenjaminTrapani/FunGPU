(letrec ((concurrent-map-reduce (lambda (target-num-threads start end map-fun reduce-fun)
                                  (if (= start end) 0
                                      (if (= end (+ start 1))
                                          (map-fun start)
                                          (if (= target-num-threads 1)
                                              (reduce-fun (map-fun start) (concurrent-map-reduce target-num-threads (+ start 1) end map-fun reduce-fun))
                                              (let ((midpoint (+ start (floor (/ (- end start) 2)))))
                                                (let ((reduced-lhs (concurrent-map-reduce (floor (/ target-num-threads 2)) start midpoint map-fun reduce-fun))
                                                      (reduced-rhs (concurrent-map-reduce (floor (/ target-num-threads 2)) midpoint end map-fun reduce-fun))
                                                      )
                                                  (reduce-fun reduced-lhs reduced-rhs)
                                                  )
                                                )
                                              ))))))
  (concurrent-map-reduce 4096 0 16384 (lambda (x) (+ x 1)) (lambda (a b) (+ a b))))