(let ((my-cons (lambda (x rest)
	(lambda (sel-first?)
	  (if (> sel-first? 0) x rest))))
  (my-first (lambda (list)
      (list 1)))
  (my-rest (lambda (list)
      (list 0)))
  (my-list-terminator (let ((term-val (lambda () 0))) (lambda (sel-first?) term-val)))
  (my-is-empty (lambda (list) (eq? (list 0) (list 1)))))
  (letrec ((list-sum (lambda (l)
    (if (my-is-empty l)
        0
        (+ (my-first l) (list-sum (my-rest l)))))))
    (list-sum (my-cons 2 (my-cons 1 (my-cons 3 my-list-terminator))))))
