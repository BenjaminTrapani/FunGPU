(let ((num-integrate (lambda (input width func)
                       (let ((half-width (/ width 2)))
                         (* width (+ (func (+ input half-width)) (func (- input half-width)))))))
      (hard-function (lambda (x)
                       (/ (* (expt x 4) (remainder (floor (/ (* (+ x 7) (expt x 3)) (+ 1 (+ x (* x x))))) (floor (+ x 30)))) (* (- 1 (* x x)) (expt (+ (* x x) (expt x 4)) 0.5)))))
      (integrate-with-accum (lambda (self num-integrate-f f a b width accum)
                              (let ((perform-rec-call (lambda (self a b width accum num-integrate-f f)
                                                        (self self num-integrate-f f (+ a width) b width (+ accum (num-integrate-f a width f))))))
        (if (> a b)
          accum
          (perform-rec-call self a b width accum num-integrate-f f)))))
      (integrate-between (lambda (self integrate-with-accum-f num-integrate-f f a b max-width block-width)
                             (let ((cur-width (- b a))
                                   (midpoint (/ (+ a b) 2))
                                   (zero 0)
                                   (perform-recursion (lambda (integrate-between-f integrate-with-accum-f num-integrate-f f a b midpoint max-width block-width)
                                                        (+ (integrate-between-f integrate-between-f integrate-with-accum-f num-integrate-f f a midpoint max-width block-width)
                                                           (integrate-between-f integrate-between-f integrate-with-accum-f num-integrate-f f midpoint b max-width block-width)))))
                               (if (> cur-width block-width)
                                   (perform-recursion self integrate-with-accum-f num-integrate-f f a b midpoint max-width block-width)
                                   (integrate-with-accum-f integrate-with-accum-f num-integrate-f f a b max-width zero))))))
      (integrate-between integrate-between integrate-with-accum num-integrate hard-function 0 4096 0.001 2))