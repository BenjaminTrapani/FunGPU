(let ((num-integrate (lambda (input width func)
                                (let ((half-width (/ width 2)))
                                (* width (+ (func (+ input half-width)) (func (- input half-width)))))))
      (hard-function (lambda (x)
                             (/ (+ 1 (* x x)) (* (- 1 (* x x)) (expt (+ 1 (expt x 4)) 0.5))))))
                             (letrec ((integrate-between (lambda (f a b max-width)
                                                                  (let ((cur-width (- b a))
                                                                        (midpoint (/ (+ a b) 2)))
                                                                  (if (> max-width cur-width)
                                                                      (num-integrate midpoint cur-width f)
                                                                      (+ (integrate-between f a midpoint max-width)
                                                                         (integrate-between f midpoint b max-width))))))
                                       (integrate-by-blocks (lambda (f a b max-width block-size accum)
                                                                    (let ((cur-upper-bound (+ a block-size)))
                                                                    (if (> cur-upper-bound b)
                                                                        (+ accum (integrate-between f a b max-width))
                                                                        (integrate-by-blocks f cur-upper-bound b max-width block-size
                                                                                             (+ accum  (integrate-between f a cur-upper-bound max-width))))))))
                                     (integrate-by-blocks hard-function 2 2048 1 128 0)))
