(let ((my-cons (lambda (x rest)
                 (lambda (sel-first?)
                   (if (> sel-first? 0) x rest))))
      (my-first (lambda (list)
                  (list 1)))
      (my-rest (lambda (list)
                 (list 0)))
      (my-list-terminator (lambda () 0)))
  (let ((my-is-empty? (lambda (list) (eq? list my-list-terminator))))
    (letrec ((my-list-contains (lambda (list elem)
                                (if (my-is-empty? list)
                                    0
                                    (if (= (my-first list) elem)
                                        1
                                        (my-list-contains (my-rest list) elem)))))
             (list-set-minus (lambda (src-list list-to-remove)
                               (if (my-is-empty? src-list)
                                   my-list-terminator
                               (if (= (my-list-contains list-to-remove (my-first src-list)) 0)
                                   (my-cons (my-first src-list) (list-set-minus (my-rest src-list) list-to-remove))
                                   (list-set-minus (my-rest src-list) list-to-remove))))))
      (letrec ((gen-numbers-between (lambda (start end)
                                      (if (> start (- end 1))
                                          my-list-terminator
                                          (my-cons start (gen-numbers-between (+ 1 start) end))))))
        (let ((make-graph-edge (lambda (from to)
                                 (my-cons from (my-cons to my-list-terminator))))
              (graph-colors (gen-numbers-between 1 4)))
          (letrec ((gen-edges (lambda (coprimes1 coprimes2 base factor edge-count)
                                (if (> 0 (- edge-count 1))
                                    my-list-terminator
                                    (if (> factor base)
                                        (gen-edges (my-rest coprimes1) (my-rest coprimes2) base 1 edge-count)
                                        (let ((coprime1 (my-first coprimes1))
                                              (coprime2 (my-first coprimes2)))
                                    (let ((v1 (remainder (* coprime1 factor) base))
                                          (v2 (remainder (* coprime2 factor) base)))
                                      (my-cons (make-graph-edge v1 v2)
                                               (gen-edges coprimes1 coprimes2 base (+ factor 1)
                                                          (- edge-count 1))))))))))
            (let ((graph-verts (gen-numbers-between 0 13))
                  (graph-edges (gen-edges (my-cons 5 (my-cons 5 my-list-terminator))
                                          (my-cons 3 (my-cons 7 my-list-terminator)) 13 1 24))
                  (make-graph-color-per-vert (lambda (color vert)
                                               (my-cons vert (my-cons color my-list-terminator)))))
              (letrec ((get-second-in-pair-for-first-of (lambda (first list-of-pairs)
                                                          (if (my-is-empty? list-of-pairs)
                                                              my-list-terminator
                                                              (let ((pair-here (my-first list-of-pairs)))
                                                                (if (= first (my-first pair-here))
                                                                    (my-cons (my-first (my-rest pair-here))
                                                                             (get-second-in-pair-for-first-of
                                                                              first (my-rest list-of-pairs)))
                                                                    (get-second-in-pair-for-first-of
                                                                     first (my-rest list-of-pairs)))))))
                       (get-colors-for-verts (lambda (adjacent-verts color-per-vert)
                                               (if (my-is-empty? adjacent-verts)
                                                   my-list-terminator
                                                   (let ((colors-for-vert (get-second-in-pair-for-first-of (my-first adjacent-verts)
                                                                                                           color-per-vert)))
                                                     (if (my-is-empty? colors-for-vert)
                                                         (get-colors-for-verts (my-rest adjacent-verts) color-per-vert)
                                                         (my-cons (my-first colors-for-vert) (get-colors-for-verts (my-rest adjacent-verts) color-per-vert))))))))
                (let ((get-adjacent-verts (lambda (source-vert remaining-edges)
                                            (get-second-in-pair-for-first-of source-vert remaining-edges))))
                  (letrec ((get-colorings-count (lambda (remaining-verts color-per-vert)
                                                  (if (my-is-empty? remaining-verts) 1
                                                  (let ((working-vert (my-first remaining-verts)))
                                                    (let ((adjacent-verts (get-adjacent-verts working-vert graph-edges)))
                                                      (let ((adjacent-colors (get-colors-for-verts adjacent-verts color-per-vert)))
                                                        (let ((possible-colors-here (list-set-minus graph-colors adjacent-colors)))
                                                          (letrec ((count-colorings-from-here (lambda (colors)
                                                                                                (if (my-is-empty? colors)
                                                                                                    0
                                                                                                    (+ (get-colorings-count (my-rest remaining-verts)
                                                                                                                            (my-cons (make-graph-color-per-vert (my-first colors) working-vert)
                                                                                                                                     color-per-vert))
                                                                                                       (count-colorings-from-here (my-rest colors)))))))
                                                            (count-colorings-from-here possible-colors-here))))))))))
                    (get-colorings-count graph-verts my-list-terminator)))))))))))
